type Employee {
  firstName: String
  employeeID: String
  lastName: String
  title: String
  orders: [Order] @relation(name: "SOLD", direction: "OUT")
  numProducts: Int
    @cypher(statement: "MATCH (this)-[:SOLD]->(r:Order) RETURN COUNT(r)")
  avgPrice: Float
    @cypher(
      statement: "MATCH  (this)-[:SOLD]-> (o2)- [:PRODUCT] -> (other:Product) RETURN  toFloat(avg(other.unitPrice))"
    )
}

type Order {
  orderID: String
  shipName: String
  employes: [Employee] @relation(name: "SOLD", direction: "IN")
  products: [Product] @relation(name: "PRODUCT", direction: "OUT")
}

type Product {
  productId: String
  productName: String
  unitPrice: Float
  orders: [Order] @relation(name: "PRODUCT", direction: "IN")
}

type User {
  id: ID!
  name: String
  friends: [User] @relation(name: "FRIENDS", direction: "BOTH")
  reviews: [Review] @relation(name: "WROTE", direction: "OUT")
  avgStars: Float
    @cypher(
      statement: "MATCH (this)-[:WROTE]->(r:Review) RETURN toFloat(avg(r.stars))"
    )
  numReviews: Int
    @cypher(statement: "MATCH (this)-[:WROTE]->(r:Review) RETURN COUNT(r)")
}

type Business {
  id: ID!
  name: String
  address: String
  city: String
  state: String
  reviews: [Review] @relation(name: "REVIEWS", direction: "IN")
  categories: [Category] @relation(name: "IN_CATEGORY", direction: "OUT")
}

type Review {
  id: ID!
  stars: Int
  text: String
  business: Business @relation(name: "REVIEWS", direction: "OUT")
  user: User @relation(name: "WROTE", direction: "IN")
}

type Category {
  name: ID!
  businesses: [Business] @relation(name: "IN_CATEGORY", direction: "IN")
}

type Query {
  usersBySubstring(
    param1: String
    param2: String
    first: Int = 10
    offset: Int = 0
  ): [Product]
    @cypher(
      statement: "MATCH (u:Product) WHERE u.productName CONTAINS $param1 OR  u.productName CONTAINS $param2 RETURN u"
    )
}
